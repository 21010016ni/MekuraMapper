色
dcdddd / 302833

3b7960
4c6cb3
9370db
727171 微妙 色がダサい
97a791
d0af4c
f8b862 微妙　白すぎて線が見えない
e95464 微妙　ちょっと明るすぎる


実装すべきもの

フィールド
	Mobの情報をリストで持っておき、それをマップ上に表示する
	あとはフィールド一枚につきマップもあったほうがいい
音響表示
	とりあえず移動や足踏みなどで足音を立てるたびに反響した壁の情報を表示させる
	そういえば杖って必要かな　少なくとも水の音は位置と合わせて表示できる　できるか？　難しくない？
	聞こえる音を特定の方向だけに絞るっていうのが共通操作として必要
	必要な音　壁の音　これは特定方向で、音量で距離を表現する
	水の音　これは自分の四方マスに水がある場合のみ？　方向を持つ

変更すべきもの

アイコンセット
	現在はグリッドマップがアイコンセットを持ってるけど、これはゲーム中共通にする



壁反響の表現について

int ChangeNextPlayPanSoundMem( int PanPal , int SoundHandle ) ;
次の音再生時のパンを指定する
PanPal -255~255 なので最低でもshort型
-で右の音を小さくし、+で左の音を小さくする
なので、左だけを再生させるなら-255 右だけなら255を指定する
ただしこれは音が大きくなるわけではないことに注意する
反響は、時間と音量によって壁までの距離を表現し、パンによって方向を表現する
自分から見てすぐ前　@| という関係だった場合、音を鳴らした同タイミングで反響が返ってくる
@_| だった場合1フレームディレイ　距離は3マスまで確認できるようにする
この辺の数字は適当　さすがに1フレームディレイじゃ無理ってなったら8フレームくらいは取ってもいい

で、パンについては四方向のみを受け取るようにするけど、そもそも通常の音ってどうしよう
方向フォーカスをすることを前提にするなら、通常時は四方向に限らない全方向の壁に反響させてもいい　計算だるいけど
環境音として考えるならそっちのほうが自然　考えられるのは、適当に8か16方向くらいにRayを伸ばして衝突までの距離を見るやつ
一回ちょっとやってみよう

ウゲエ！　動的に立体反響音を生成するのくそだるいんだけど
え？　ありえんくらいだるいな　こんなことやってられっかよオ！！
というわけなのでRayの衝突距離を求めて距離に対応する音量とディレイを設定した音声をRayの角度に応じたやつを再生するように
それだと複数の音が反響で帰ってきたときクソうるさくなるわけですが　それは？　そもそもの絶対音量を調整するしかないか

う～ん　参考文献は一切障害物のない純粋な立体音響のみを生成する方法しか見つからなかった
一応見つかったけどそれってさあ！　純粋にC++で動くシェーダーを自作しろって言ってるのと同じじゃないんですか！？





全体設計について

ゲーム中には、地図エリア、情報表示エリアがある
マップは複数ある　表示するマップは下タブから切り替えられる

フィールドリスト
　フィールド
　　フィールドグリッド
　　地図
　　Mobリスト

SE管理


地図上には、プレイヤーの書いた地図情報とMobリストから取得したMob情報が表示される
プレイヤーはMobの一種として扱う

フィールドグリッド、およびMobからSE管理にアクセスしてSEを登録・再生する

プレイヤーの操作とは
基本的には、
・地図記入
・マップ切り替え（タブ選択）
・オブジェクト干渉、移動、方向転換

となる
それぞれ、

・地図（フィールド下位）
・フィールドリスト
・Mobリスト、フィールドグリッド

に干渉する

何をするべき？

操作干渉　プレイヤーを作ってそれを動かせるようにする


ターン制の管理
どうにもならないため、ターンの順序を設定する


ターン開始
プレイヤー操作受付
　アクションだったらそれを実行、操作受付に戻る
　移動だったらそれを受け取って命令をスタックしておく
モブの処理開始（移動、攻撃など）
ターン終了

って流れ

この操作スタックはどこに置く？　ゲーム全体を管理するクラス、または入力を管理するクラス
正直Grid.hppにマウス操作が置かれてるのキショイから入力管理クラス作りたいなあ
でもその辺やってるのあれ　なんだろうね

いうて面倒だしGame.cppにおいててもいいような気がするけど
とりあえずそこに作っておいて、後でどうしても気になるなら変える

とりあえず、移動に関してはそんな感じ
Grid.hppの操作について

必要な情報は、マウスの座標、操作状況
だから更新されているか否か　されていたとしたらその情報
されていなかったとしたらマウスの入力状況　というよりなんのコマンドを実行するか？
関数に分けたほうがいいのか
結局スクロール情報はグリッド本体が持ってるわけだから、渡さないとどうにも
そこから切り分ける？　表示と本体を明確に切り分けたほうがいいのか
単機能クラスって話だと多分そっちのほうがいいんだよな　でも面倒、だし操作にその表示クラスを咬ませなきゃいけない
結局同じことならやらないほうが楽

鉛筆ツール(0)の時
アイコンセットの表示を切り替える（中クリック）
線を消す（右ドラッグ）
アイコンを持ち上げる（左クリック）
線を引く（左ドラッグ）
線をリセットする（左リリース）

ブラシツール(1)の時
色切り替えモードを起動する（中クリック）
色切り替えを確定させて終了する（中リリース）
色を消す（右ドラッグ）
色を塗る（左ドラッグ）

アイコンツール(2)の時
アイコンセットの表示を切り替える（中クリック）
アイコンを置く（左リリース）


